package com.paratussoftware.ui.views;

import com.paratussoftware.image_analysis.processors.WandMotion;
import com.paratussoftware.Grimoire;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.util.List;

import static com.paratussoftware.ui.drawing.MotionDrawings.drawMotionsTo;

public class CameraUI extends javax.swing.JFrame {

    public CameraUI() {
        initComponents();
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(closeListener());
        this.setDefaultValues();
    }
    
    private void setDefaultValues(){
        this.thresholdSlider.setValue((int) Grimoire.UserSettings.MOTION_THRESHOLD * 1000);
        this.gaussianBlurSlider.setValue(Grimoire.UserSettings.GAUSSIAN_KERNEL_SIZE);
        this.birhgtnessSlider.setValue((int) Grimoire.UserSettings.INTENSITY_THRESHOLD * 1000);
        this.motionDetectionSlider.setValue(Grimoire.UserSettings.MOTION_DETECTION_DISTANCE);
        this.motionSizeSlider.setValue(Grimoire.UserSettings.MAX_MOTION_SIZE_LIMIT);
    }

    public void drawFrame(BufferedImage frame){
        Graphics graphics = this.videoPanel.getGraphics();
        graphics.drawImage(frame, 0, 0, null);
    }

    public void drawFrame(BufferedImage image, List<WandMotion> motions){
        drawFrame(drawMotionsTo(image, motions));
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        thresholdSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        gaussianBlurSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        birhgtnessSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        motionDetectionSlider = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        motionSizeSlider = new javax.swing.JSlider();
        videoPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        thresholdSlider.setMajorTickSpacing(100000);
        thresholdSlider.setMaximum(255000);
        thresholdSlider.setMinorTickSpacing(10000);
        thresholdSlider.setPaintTicks(true);
        thresholdSlider.setValue(25000);
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });

        jLabel2.setText("Threshold");

        jLabel1.setText("Gaussian Blur");

        gaussianBlurSlider.setMajorTickSpacing(4);
        gaussianBlurSlider.setMaximum(35);
        gaussianBlurSlider.setMinimum(1);
        gaussianBlurSlider.setMinorTickSpacing(2);
        gaussianBlurSlider.setPaintTicks(true);
        gaussianBlurSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gaussianBlurSliderStateChanged(evt);
            }
        });

        jLabel3.setText("Brightness Threshold");

        birhgtnessSlider.setMajorTickSpacing(100);
        birhgtnessSlider.setMaximum(1000);
        birhgtnessSlider.setMinorTickSpacing(50);
        birhgtnessSlider.setPaintTicks(true);
        birhgtnessSlider.setValue(600);
        birhgtnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                birhgtnessSliderStateChanged(evt);
            }
        });

        jLabel4.setText("Motion Detection Distance");

        motionDetectionSlider.setMajorTickSpacing(10);
        motionDetectionSlider.setMinorTickSpacing(5);
        motionDetectionSlider.setPaintTicks(true);
        motionDetectionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                motionDetectionSliderStateChanged(evt);
            }
        });

        jLabel5.setText("Motion Size Limit");

        motionSizeSlider.setMajorTickSpacing(10);
        motionSizeSlider.setMinorTickSpacing(5);
        motionSizeSlider.setPaintTicks(true);
        motionSizeSlider.setToolTipText("");
        motionSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                motionSizeSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(thresholdSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)
                        .addComponent(gaussianBlurSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3)
                    .addComponent(birhgtnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(motionDetectionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(motionSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gaussianBlurSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(birhgtnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motionDetectionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motionSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        videoPanel.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout videoPanelLayout = new javax.swing.GroupLayout(videoPanel);
        videoPanel.setLayout(videoPanelLayout);
        videoPanelLayout.setHorizontalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );
        videoPanelLayout.setVerticalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 479, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(videoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(videoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
        // TODO add your handling code here:
        double newVal = this.thresholdSlider.getValue() / 1000.0;
        Grimoire.UserSettings.MOTION_THRESHOLD = newVal;
    }//GEN-LAST:event_thresholdSliderStateChanged

    private void gaussianBlurSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gaussianBlurSliderStateChanged
        // TODO add your handling code here:
        int newVal = this.gaussianBlurSlider.getValue();
        if(newVal % 2 ==0)
            newVal += 1;
        this.gaussianBlurSlider.setValue(newVal);
        Grimoire.UserSettings.GAUSSIAN_KERNEL_SIZE = newVal;
    }//GEN-LAST:event_gaussianBlurSliderStateChanged

    private void birhgtnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_birhgtnessSliderStateChanged
        // TODO add your handling code here:
        double newVal = this.birhgtnessSlider.getValue() / 1000.0;
        Grimoire.UserSettings.INTENSITY_THRESHOLD = newVal;
    }//GEN-LAST:event_birhgtnessSliderStateChanged

    private void motionDetectionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_motionDetectionSliderStateChanged
        // TODO add your handling code here:
        Grimoire.UserSettings.MOTION_DETECTION_DISTANCE = this.motionDetectionSlider.getValue();
    }//GEN-LAST:event_motionDetectionSliderStateChanged

    private void motionSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_motionSizeSliderStateChanged
        // TODO add your handling code here:
        Grimoire.UserSettings.MAX_MOTION_SIZE_LIMIT = this.motionSizeSlider.getValue();
    }//GEN-LAST:event_motionSizeSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider birhgtnessSlider;
    private javax.swing.JSlider gaussianBlurSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider motionDetectionSlider;
    private javax.swing.JSlider motionSizeSlider;
    private javax.swing.JSlider thresholdSlider;
    private javax.swing.JPanel videoPanel;
    // End of variables declaration//GEN-END:variables


    private WindowListener closeListener(){
        return new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {

            }

            @Override
            public void windowClosing(WindowEvent e) {
//                CameraUI.this.dispose();
                Grimoire.stop();
            }

            @Override
            public void windowClosed(WindowEvent e) {

            }

            @Override
            public void windowIconified(WindowEvent e) {

            }

            @Override
            public void windowDeiconified(WindowEvent e) {

            }

            @Override
            public void windowActivated(WindowEvent e) {

            }

            @Override
            public void windowDeactivated(WindowEvent e) {

            }
        };
    }
}
